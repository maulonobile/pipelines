input { pipeline { address => "haproxy" } }
filter {
  grok {
    pattern_definitions => {
      "HAPROXYDATE" => "%{MONTHDAY}/%{MONTH}/%{YEAR}:%{TIME}\.%{INT}"
      "HAPROXYHTTPBASE" => "(%{IP:[source][address]}|-):%{NUMBER:[source][port]:long} \[%{HAPROXYDATE:timestamp}\] %{NOTSPACE:[haproxy][frontend_name]} %{NOTSPACE:[haproxy][backend_name]}/%{NOTSPACE:[haproxy][server_name]} (%{IPORHOST:[destination][address]} )?%{NUMBER:[haproxy][http][request][time_wait_ms]:long}/%{NUMBER:[haproxy][total_waiting_time_ms]:long}/%{NUMBER:[haproxy][connection_wait_time_ms]:long}/%{NUMBER:[haproxy][http][request][time_wait_without_data_ms]:long}/%{NUMBER:[event][duration]:long} %{NUMBER:[http][response][status_code]:long} %{NUMBER:[http][response][bytes]:long} %{DATA} %{DATA} %{NOTSPACE:[haproxy][termination_state]} %{NUMBER:[haproxy][connections][active]:long}/%{NUMBER:[haproxy][connections][frontend]:long}/%{NUMBER:[haproxy][connections][backend]:long}/%{NUMBER:[haproxy][connections][server]:long}/%{NUMBER:[haproxy][connections][retries]:long} %{NUMBER:[haproxy][server_queue]:long}/%{NUMBER:[haproxy][backend_queue]:long} (\{.*\} \{.*\} |\{.*\} )?\"(?:%{WORD:[http][request][method]} %{NOTSPACE:[url][original]}(?: HTTP/%{NUMBER:[http][version]})?|%{DATA:[haproxy][http][request][raw_request_line]})\""
      "HAPROXYERROR" => "%{IP:[source][address]}:%{INT:[source][port]:long} \[%{HAPROXYDATE:timestamp}\] %{NOTSPACE:[haproxy][frontend_name]}/%{NOTSPACE:[haproxy][bind_name]}: %{GREEDYDATA:message}"
      "HAPROXYPROCESS" => "(?:\[%{LOGLEVEL:[log][level]}\]%{SPACE}\(%{NUMBER:[process][pid]:long}\)%{SPACE}: )?%{GREEDYDATA:message}"
    }
    match => {
      "message" => [
        "%{HAPROXYHTTPBASE}",
        "%{HAPROXYERROR}",
        "%{HAPROXYPROCESS}"
      ]
    }
    overwrite => [ "message" ]
  }

  date {
    match => [ "timestamp", "dd/MMM/yyyy:H:m:s.SSSSSS", "dd/MMM/yyyy:H:m:s.SSSSSS Z" ]
    timezone => "UTC"
    remove_field => [ "timestamp" ]
  }

  ruby {
    # Convert microseconds to nanoseconds
    code => 'event.set("[event][duration]", event.get("[event][duration]").to_i * 1000000)'
  }

  if [http] {
    mutate {
      remove_field => [ "message" ]
      add_field => {
        "[labels][log_type]" => "haproxy-access"
      }
    }
  }

  if [source] and ![http] {
    mutate {
      add_field => {
        "[labels][log_type]" => "haproxy-error"
      }
    }
  }

  if [process] {
    mutate {
      add_field => {
        "[labels][log_type]" => "haproxy-process"
      }
    }
  }
}
output { pipeline { send_to => "beats-output-elasticsearch" } }